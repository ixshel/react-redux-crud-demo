{"version":3,"sources":["logo.svg","Post/Post.js","Post/EditPost.js","Post/AllPost.js","Post/PostForm.js","App.js","serviceWorker.js","reducers/postReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","Post","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","react_default","a","createElement","className","props","post","title","message","onClick","dispatch","type","id","Component","connect","EditPost","_getPrototypeOf2","_len","length","args","Array","_key","call","concat","handleEdit","e","preventDefault","data","newTitle","getTitle","newMessage","getMessage","_this2","onSubmit","required","ref","input","defaultValue","placeholder","AllPost","posts","map","editing","Post_EditPost","src_Post_Post","postMessage","state","console","log","PostForm","handleSubmit","Date","cols","rows","App","src","logo","alt","Post_PostForm","Post_AllPost","style","display","verticalAlign","marginTop","color","Boolean","window","location","hostname","match","postReducer","undefined","action","filter","objectSpread","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19ce12f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nexport class Post extends Component {\n\n    render() {\n        return (\n            <div className='post'>\n                <h2 className='post_title'>{this.props.post.title}</h2>\n                <p className='post_message'>{this.props.post.message}</p>\n                <div className='control-buttons'>\n                <button className='edit'\n                    onClick={() => this.props.dispatch({ type: 'EDIT_POST', id: this.props.post.id })}>Edit</button>\n                <button className='delete'\n                    onClick={() => this.props.dispatch({ type: 'DELETE_POST', id: this.props.post.id })} >Delete</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect()(Post);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nexport class EditPost extends Component {\n    handleEdit = (e) => {\n        e.preventDefault();\n        const newTitle = this.getTitle.value;\n        const newMessage = this.getMessage.value;\n        const data = {\n            newTitle,\n            newMessage\n        }\n        this.props.dispatch({\n            type: 'UPDATE',\n            id: this.props.post.id,\n            data: data\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <form className='form' onSubmit={this.handleEdit}>\n                    <input required type=\"text\" ref={(input) => this.getTitle = input}\n                        defaultValue={this.props.post.title} placeholder='Enter Title' />\n                    <br /><br />\n                    <input required type=\"text\" ref={(input) => this.getMessage = input}\n                        defaultValue={this.props.post.message} placeholder='Enter message here' />\n                    <button>Update</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default connect()(EditPost)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\n// Components\nimport Post from './Post';\nimport EditComponent from './EditPost';\n\nclass AllPost extends Component {\n    render() {\n        return (\n            <div className='post-container'>\n                <div className='post'>\n                    <h1 className='post_heading'>All Post</h1>\n                    {this.props.posts.map((post) =>\n                        <div key={post.id}>\n                            {post.editing ?\n                                <EditComponent post={post} key={post.id} /> :\n                                <Post key={postMessage.id} post={post} />}\n                        </div>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    console.log('State:: ', state);\n\n    return {\n        posts: state\n    }\n}\n\nexport default connect(mapStateToProps)(AllPost);","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nclass PostForm extends Component {\n    // Element actions\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const title = this.getTitle.value;\n        const message = this.getMessage.value;\n        const data = {\n            id: new Date(),\n            title,\n            message\n        }\n        console.log('Post Data:: ', data);\n        // Dispatch component since we have connect\n        this.props.dispatch({\n            type: 'ADD_POST',\n            data,\n            editing: false\n        });\n        this.getTitle.value = '';\n        this.getMessage.value = '';\n    }\n\n    // Render element HTML\n    render() {\n        return (\n            <div className='post-container' >\n                <div className='post'>\n                <h1 className='post_heading'>Create Post</h1>\n                <form className='form' onSubmit={this.handleSubmit}>\n                    <input required type='text'\n                        placeholder='Enter post title'\n                        ref={(input) => this.getTitle = input} />\n                    <br /> <br />\n                    <textarea required placeholder='Enter post'\n                        cols=\"5\" rows=\"24\"\n                        ref={(input) => this.getMessage = input} />\n                    <br /> <br />\n                    <button>Post</button>\n                </form>\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default connect()(PostForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport logo from './logo.svg';\nimport AllPost from './Post/AllPost';\nimport PostForm from './Post/PostForm';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='navbar'>\n          <img src={logo} alt='' />\n          <h2 className='center'>React-Redux Demo</h2>\n          <img src={logo} alt='' />\n        </div>\n        <PostForm />\n        {this.props.posts.length !== 0 ? <AllPost /> : <p style={{ display: 'inline-block', verticalAlign: 'top', marginTop: '60px', color: 'red' }}>No posts yet</p>}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  console.log('All Post - State:: ', state);\n\n  return {\n    posts: state\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    bindActionCreators\n} from \"redux\";\n\nconst postReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'ADD_POST':\n            return state.concat([action.data]);\n\n        case 'DELETE_POST':\n            return state.filter((post) => post.id !== action.id);\n\n        case 'EDIT_POST':\n            return state.map((post) => post.id === action.id ? { ...post,\n                editing: !post.editing\n            } : post)\n\n        case 'UPDATE':\n            return state.map((post) => {\n                if (post.id === action.id) {\n                    return {\n                        ...post,\n                        title: action.data.newTitle,\n                        message: action.data.newMessage,\n                        editing: !post.editing\n                    }\n                } else return post;\n            })\n\n\n        default:\n            return state;\n    }\n};\n\nexport default postReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Redux\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport postReducer from './reducers/postReducer';\n\nconst store = createStore(postReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}